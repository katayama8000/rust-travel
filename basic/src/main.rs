fn main() {
    // rustの型
    // スカラー型
    // 整数型
    // 符号付き整数型
    // i8, i16, i32, i64, i128, isize
    // 符号付き整数型の計算方法
    // -(2n - 1)以上2n - 1 - 1以下
    // 8ビット
    let a: i8 = 127;
    let b: i8 = -128;
    // let c: i8 = 128; // NG
    // 16ビット
    let a: i16 = 32767;
    let b: i16 = -32768;
    // let c: i16 = 32768; // NG
    // 32ビット
    let a: i32 = 2147483647;
    let b: i32 = -2147483648;
    // let c: i32 = 2147483648; // NG
    // 64ビット
    let a: i64 = 9223372036854775807;
    let b: i64 = -9223372036854775808;
    // let c: i64 = 9223372036854775808; // NG
    // 128ビット
    let a: i128 = 170141183460469231731687303715884105727;
    let b: i128 = -170141183460469231731687303715884105728;
    // let c: i128 = 170141183460469231731687303715884105728; // NG
    // isize
    // isizeとは
    // isizeは、プラットフォームに依存する符号付き整数型です。64ビットのプラットフォームでは、i64と同じです。32ビットのプラットフォームでは、i32と同じです。
    let a: isize = 9223372036854775807;
    let b: isize = -9223372036854775808;
    // let c: isize = 9223372036854775808; // NG
    // --------------------------------------------------
    // 符号なし整数型
    // u8, u16, u32, u64, u128, usize
    // 符号なし整数型の計算方法
    // 2n - 1以下
    // 8ビット
    let a: u8 = 255;
    // let b: u8 = 256; // NG
    // 16ビット
    let a: u16 = 65535;
    // let b: u16 = 65536; // NG
    // 32ビット
    let a: u32 = 4294967295;
    // let b: u32 = 4294967296; // NG
    // 64ビット
    let a: u64 = 18446744073709551615;
    // let b: u64 = 18446744073709551616; // NG
    // 128ビット
    let a: u128 = 340282366920938463463374607431768211455;
    // let b: u128 = 340282366920938463463374607431768211456; // NG
    // usize
    // usizeとは
    // usizeは、プラットフォームに依存する符号なし整数型です。64ビットのプラットフォームでは、u64と同じです。32ビットのプラットフォームでは、u32と同じです。
    let a: usize = 18446744073709551615;
    // let b: usize = 18446744073709551616; // NG
    // --------------------------------------------------
    // 浮動小数点型
    // f32, f64
    // f32
    let a: f32 = 3.40282347e+38;
    let b: f32 = 1.17549435e-38;
    // let c: f32 = 3.40282347e+39; // NG
    // f64
    let a: f64 = 1.7976931348623157e+308;
    let b: f64 = 2.2250738585072014e-308;
    // let c: f64 = 1.7976931348623157e+309; // NG
    // --------------------------------------------------
    // 論理値型
    // bool
    let a: bool = true;
    let b: bool = false;
    // --------------------------------------------------
    // 文字型
    // char
    let a: char = 'a';
    let b: char = 'あ';
    // 文字列型
    let a: &str = "abc";
    let b: String = String::from("abc");
    println!("{}", a);
    println!("{}", b);
    // 比較
    println!("{}", a == b);
    // 参照比較
    println!("{}", &a == &b);
    // 複合型
    // タプル型
    // タプル型とは
    // タプル型は、複数の値をまとめて扱うことができる型です。タプル型は、異なる型の値をまとめることができます。
    let a: (i32, f64, char, String) = (1, 2.0, 'a', String::from("abc"));
    println!("{}", a.3);
    // 配列型
    // 配列型とは
    // 配列型は、同じ型の値を複数個まとめて扱うことができる型です。配列型は、同じ型の値をまとめることができます。
    let a: [i32; 3] = [1, 2, 3];
    let b: [i32; 3] = [1; 3];
    println!("{}", a[0]);
    println!("{}", a[1]);
    println!("{}", b[0]);
    println!("{}", b[1]);
    // 代入
    let mut a: [i32; 3] = [14, 24, 34];
    a[0] = 1;
    a[1] = 2;
    println!("{}", a[2]);
}
